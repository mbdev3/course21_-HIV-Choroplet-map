(function (React$1, ReactDOM, d3, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';

  const useWorldAtlas = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3.json(jsonUrl).then(topology => {
        const { countries, land } = topology.objects;
        setData({
          countries: topojson.feature(topology, countries),
          interiors: topojson.mesh(topology, countries, (a, b) => a !== b)
        });
      });
    }, []);

    return data;
  };

  const csvUrl =
    'https://gist.githubusercontent.com/curran/470752f12c027f8ff4266e7c96f26a56/raw/66908b56e371e7c9f5a1c0911ac3250f570a4c83/share-of-population-infected-with-hiv-ihme.csv';

  const row = (d) => {
    d.aids = + d['Prevalence - HIV/AIDS - Sex: Both - Age: 15-49 years (Percent) (%)'];
    return d;
  };

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3.csv(csvUrl, row).then(setData);
    }, []);

    return data;
  };

  const projection = d3.geoNaturalEarth1();
  const path = d3.geoPath(projection);
  const graticule = d3.geoGraticule();
  const missingDataColor = 'gray';
  const Marks = ({ worldAtlas: { countries, interiors }, rowByNumericCode,colorValue,colorScale }) => (
    React.createElement( 'g', { className: "marks" },
      React.createElement( 'path', { className: "sphere", d: path({ type: 'Sphere' }) }),
      React.createElement( 'path', { className: "graticules", d: path(graticule()) }),
      countries.features.map(feature => {
        const d = rowByNumericCode.get(feature.id);
        return React.createElement( 'path', { fill: d?colorScale(colorValue(d)):missingDataColor, d: path(feature) })
      }),
      React.createElement( 'path', { className: "interiors", d: path(interiors) })
      
    )
  );

  const csvUrl$1 =
    'https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/slim-3/slim-3.csv';

  const useCodes = () => {
    const [data, setData] = React$1.useState(null);
    
    React$1.useEffect(() => {
      d3.csv(csvUrl$1).then(setData);
    }, []);

    return data;
  };

  const width = 960;
  const height = 500;

  const App = () => {
    const worldAtlas = useWorldAtlas();
    const data = useData();
    const codes = useCodes();
    if (!worldAtlas || !data || !codes) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
    const filteredData = data.filter(
      (d) => d.Year === '2017'
    );
   
    const numericCodeByAlphaCode = new Map();
    
    codes.forEach((code)=>numericCodeByAlphaCode.set(code['alpha-3'],code['country-code']));
    
    const rowByNumericCode = new Map();
    filteredData.forEach((d) => {
      const alpha3Code = d.Code;
      const numericCode = numericCodeByAlphaCode.get(alpha3Code);
       rowByNumericCode.set(numericCode, d);
    });

    const colorValue = (d) => d.aids;

    const colorScale = d3.scaleSequential(
      d3.interpolateYlOrRd
    ).domain([0, d3.max(data, colorValue)]);

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( Marks, {
          worldAtlas: worldAtlas, data: data, colorScale: colorScale, colorValue: colorValue, rowByNumericCode: rowByNumericCode })
      )
    );
  };
  const rootElement = document.getElementById(
    'root'
  );
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,